name: Deploy to Production Server (Password Auth)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test Auth Server
      run: |
        cd auth-server
        pip install -r requirements.txt
        python -m pytest tests/ || echo "No tests found for auth-server"
    
    - name: Test RAG Server
      run: |
        cd rag
        pip install -r requirements.txt
        python -m pytest tests/ || echo "No tests found for rag"

  build-quill:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Build Production Quill Extension
      run: |
        cd quill
        npm install
        npm run compile
        # Create production build with server endpoint
        PROD_SERVER=45.76.61.43 npm run build
    
    - name: Upload Quill Artifact
      uses: actions/upload-artifact@v3
      with:
        name: quill-production
        path: quill/quill-*.vsix

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-quill]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
    
    - name: Setup SSH known hosts
      run: ssh-keyscan -H 45.76.61.43 >> ~/.ssh/known_hosts
    
    - name: Deploy Configuration Files
      run: |
        # Upload configuration files to server
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no config/auth-server.prod.env root@45.76.61.43:/tmp/
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no config/rag-server.prod.env root@45.76.61.43:/tmp/
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no config/production.env root@45.76.61.43:/tmp/
        
        # Create config directory and move files
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@45.76.61.43 << 'EOF'
          mkdir -p /opt/ra-prod/config
          mv /tmp/*.env /opt/ra-prod/config/
        EOF
        
    - name: Deploy Auth Server
      run: |
        # Upload deployment script
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no scripts/deploy-auth-server.sh root@45.76.61.43:/tmp/
        
        # Upload application files
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r auth-server/ root@45.76.61.43:/tmp/
        
        # Run deployment
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@45.76.61.43 << 'EOF'
          chmod +x /tmp/deploy-auth-server.sh
          cd /tmp
          SERVER_HOST=45.76.61.43 SERVER_USER=root ./deploy-auth-server.sh
        EOF
      env:
        SERVER_HOST: 45.76.61.43
        SERVER_USER: root
    
    - name: Deploy RAG Server
      run: |
        # Upload deployment script
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no scripts/deploy-rag.sh root@45.76.61.43:/tmp/
        
        # Upload application files
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r rag/ root@45.76.61.43:/tmp/
        
        # Run deployment
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@45.76.61.43 << 'EOF'
          chmod +x /tmp/deploy-rag.sh
          cd /tmp
          SERVER_HOST=45.76.61.43 SERVER_USER=root ./deploy-rag.sh
        EOF
      env:
        SERVER_HOST: 45.76.61.43
        SERVER_USER: root
    
    - name: Health Check
      run: |
        sleep 10
        curl -f http://45.76.61.43:5000/health || exit 1
        curl -f http://45.76.61.43:5001/health || exit 1
        echo "Health checks passed!"

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Quill Artifact
      uses: actions/download-artifact@v3
      with:
        name: quill-production
        path: ./artifacts
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment completed successfully
          - Auth Server deployed to 45.76.61.43:5000
          - RAG Server deployed to 45.76.61.43:5001
          - Quill extension built for production
        draft: false
        prerelease: false